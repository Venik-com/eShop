// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Microsoft.eShopWeb.Infrastructure.Data;

namespace Microsoft.eShopWeb.Infrastructure.Migrations
{
    [DbContext(typeof(ECommerceEntitiesContext))]
    [Migration("20210328231227_ECommerceEntities")]
    partial class ECommerceEntities
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("Microsoft.eShopWeb.ApplicationCore.Entities.Customers.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AddressLine1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLine2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLine3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLine4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountyOrRegion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LoginName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LoginPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrganisationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrganisationOrPerson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TownCity")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CustomerId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Microsoft.eShopWeb.ApplicationCore.Entities.Customers.CustomerPaymentMethod", b =>
                {
                    b.Property<int>("CustomerPaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("CrediCardNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("PaymentMethodCode")
                        .HasColumnType("int");

                    b.Property<string>("PaymentMethodDetails")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CustomerPaymentId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PaymentMethodCode");

                    b.ToTable("CustomerPaymentMethods");
                });

            modelBuilder.Entity("Microsoft.eShopWeb.ApplicationCore.Entities.Customers.Invoice", b =>
                {
                    b.Property<int>("InvoiceNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InvoiceDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InvoiceStatusCode")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.HasKey("InvoiceNumber");

                    b.HasIndex("InvoiceStatusCode");

                    b.HasIndex("OrderId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("Microsoft.eShopWeb.ApplicationCore.Entities.Customers.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOrderPlaced")
                        .HasColumnType("datetime2");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("OrderDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderStatusCode")
                        .HasColumnType("int");

                    b.HasKey("OrderId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OrderStatusCode");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Microsoft.eShopWeb.ApplicationCore.Entities.Customers.OrderItem", b =>
                {
                    b.Property<int>("OrderItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("OrderItemPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("OrderItemQuantity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderItemStatusCode")
                        .HasColumnType("int");

                    b.Property<string>("OtherOrderItemDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("RMAIssuedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RMAIssuedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RMANumber")
                        .HasColumnType("int");

                    b.HasKey("OrderItemId");

                    b.HasIndex("OrderId");

                    b.HasIndex("OrderItemStatusCode");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("Microsoft.eShopWeb.ApplicationCore.Entities.Customers.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("InvoiceNumber")
                        .HasColumnType("int");

                    b.Property<int>("PaymentAmount")
                        .HasColumnType("int");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.HasKey("PaymentId");

                    b.HasIndex("InvoiceNumber");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Microsoft.eShopWeb.ApplicationCore.Entities.Customers.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("OtherProductDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ProductPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProductSize")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductTypeCode")
                        .HasColumnType("int");

                    b.Property<int>("ReturnMerchandiseAuthNumber")
                        .HasColumnType("int");

                    b.HasKey("ProductId");

                    b.HasIndex("ProductTypeCode");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Microsoft.eShopWeb.ApplicationCore.Entities.Customers.RefInvoiceStatusCode", b =>
                {
                    b.Property<int>("InvoiceStatusCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("InvoiceStatusDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("InvoiceStatusCode");

                    b.ToTable("RefInvoiceStatusCodes");
                });

            modelBuilder.Entity("Microsoft.eShopWeb.ApplicationCore.Entities.Customers.RefOrderItemStatusCode", b =>
                {
                    b.Property<int>("OrderItemStatusCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("OrderItemStatusDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OrderItemStatusCode");

                    b.ToTable("RefOrderItemStatusCodes");
                });

            modelBuilder.Entity("Microsoft.eShopWeb.ApplicationCore.Entities.Customers.RefOrderStatusCode", b =>
                {
                    b.Property<int>("OrderStatusCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("OrderStatusDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OrderStatusCode");

                    b.ToTable("RefOrderStatusCodes");
                });

            modelBuilder.Entity("Microsoft.eShopWeb.ApplicationCore.Entities.Customers.RefPaymentMethod", b =>
                {
                    b.Property<int>("PaymentMethodCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("PaymentMethodDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PaymentMethodCode");

                    b.ToTable("RefPaymentMethods");
                });

            modelBuilder.Entity("Microsoft.eShopWeb.ApplicationCore.Entities.Customers.RefProductType", b =>
                {
                    b.Property<int>("ProductTypeCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("ParentProductTypeCode")
                        .HasColumnType("int");

                    b.Property<string>("ProductTypeDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductTypeCode");

                    b.ToTable("RefProductTypes");
                });

            modelBuilder.Entity("Microsoft.eShopWeb.ApplicationCore.Entities.Customers.Shipment", b =>
                {
                    b.Property<int>("ShipmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("InvoiceNumber")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<string>("OtherShipmentDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ShipmentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ShipmentTrackingNumber")
                        .HasColumnType("int");

                    b.HasKey("ShipmentId");

                    b.HasIndex("InvoiceNumber");

                    b.HasIndex("OrderId");

                    b.ToTable("Shipments");
                });

            modelBuilder.Entity("Microsoft.eShopWeb.ApplicationCore.Entities.Customers.ShipmentItem", b =>
                {
                    b.Property<int>("ShipmentId")
                        .HasColumnType("int");

                    b.Property<int>("OrderItemId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("ShipmentId", "OrderItemId");

                    b.HasIndex("OrderItemId");

                    b.ToTable("ShipmentItems");
                });

            modelBuilder.Entity("Microsoft.eShopWeb.ApplicationCore.Entities.Customers.CustomerPaymentMethod", b =>
                {
                    b.HasOne("Microsoft.eShopWeb.ApplicationCore.Entities.Customers.Customer", "Customer")
                        .WithMany("CustomerPaymentMethods")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.eShopWeb.ApplicationCore.Entities.Customers.RefPaymentMethod", "RefPaymentMethod")
                        .WithMany("CustomerPaymentMethods")
                        .HasForeignKey("PaymentMethodCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("RefPaymentMethod");
                });

            modelBuilder.Entity("Microsoft.eShopWeb.ApplicationCore.Entities.Customers.Invoice", b =>
                {
                    b.HasOne("Microsoft.eShopWeb.ApplicationCore.Entities.Customers.RefInvoiceStatusCode", "RefInvoiceStatusCode")
                        .WithMany("Invoices")
                        .HasForeignKey("InvoiceStatusCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.eShopWeb.ApplicationCore.Entities.Customers.Order", "Order")
                        .WithMany("Invoices")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("RefInvoiceStatusCode");
                });

            modelBuilder.Entity("Microsoft.eShopWeb.ApplicationCore.Entities.Customers.Order", b =>
                {
                    b.HasOne("Microsoft.eShopWeb.ApplicationCore.Entities.Customers.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.eShopWeb.ApplicationCore.Entities.Customers.RefOrderStatusCode", "RefOrderStatusCode")
                        .WithMany("Orders")
                        .HasForeignKey("OrderStatusCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("RefOrderStatusCode");
                });

            modelBuilder.Entity("Microsoft.eShopWeb.ApplicationCore.Entities.Customers.OrderItem", b =>
                {
                    b.HasOne("Microsoft.eShopWeb.ApplicationCore.Entities.Customers.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.eShopWeb.ApplicationCore.Entities.Customers.RefOrderItemStatusCode", "RefOrderItemStatusCode")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderItemStatusCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.eShopWeb.ApplicationCore.Entities.Customers.Product", "Products")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Products");

                    b.Navigation("RefOrderItemStatusCode");
                });

            modelBuilder.Entity("Microsoft.eShopWeb.ApplicationCore.Entities.Customers.Payment", b =>
                {
                    b.HasOne("Microsoft.eShopWeb.ApplicationCore.Entities.Customers.Invoice", "Invoice")
                        .WithMany("Payments")
                        .HasForeignKey("InvoiceNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("Microsoft.eShopWeb.ApplicationCore.Entities.Customers.Product", b =>
                {
                    b.HasOne("Microsoft.eShopWeb.ApplicationCore.Entities.Customers.RefProductType", "RefProductType")
                        .WithMany("Products")
                        .HasForeignKey("ProductTypeCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RefProductType");
                });

            modelBuilder.Entity("Microsoft.eShopWeb.ApplicationCore.Entities.Customers.Shipment", b =>
                {
                    b.HasOne("Microsoft.eShopWeb.ApplicationCore.Entities.Customers.Invoice", "Invoice")
                        .WithMany("Shipments")
                        .HasForeignKey("InvoiceNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.eShopWeb.ApplicationCore.Entities.Customers.Order", "Order")
                        .WithMany("Shipments")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Invoice");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Microsoft.eShopWeb.ApplicationCore.Entities.Customers.ShipmentItem", b =>
                {
                    b.HasOne("Microsoft.eShopWeb.ApplicationCore.Entities.Customers.OrderItem", "OrderItem")
                        .WithMany("ShipmentItems")
                        .HasForeignKey("OrderItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.eShopWeb.ApplicationCore.Entities.Customers.Shipment", "Shipment")
                        .WithMany("ShipmentItems")
                        .HasForeignKey("ShipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrderItem");

                    b.Navigation("Shipment");
                });

            modelBuilder.Entity("Microsoft.eShopWeb.ApplicationCore.Entities.Customers.Customer", b =>
                {
                    b.Navigation("CustomerPaymentMethods");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Microsoft.eShopWeb.ApplicationCore.Entities.Customers.Invoice", b =>
                {
                    b.Navigation("Payments");

                    b.Navigation("Shipments");
                });

            modelBuilder.Entity("Microsoft.eShopWeb.ApplicationCore.Entities.Customers.Order", b =>
                {
                    b.Navigation("Invoices");

                    b.Navigation("OrderItems");

                    b.Navigation("Shipments");
                });

            modelBuilder.Entity("Microsoft.eShopWeb.ApplicationCore.Entities.Customers.OrderItem", b =>
                {
                    b.Navigation("ShipmentItems");
                });

            modelBuilder.Entity("Microsoft.eShopWeb.ApplicationCore.Entities.Customers.Product", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("Microsoft.eShopWeb.ApplicationCore.Entities.Customers.RefInvoiceStatusCode", b =>
                {
                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("Microsoft.eShopWeb.ApplicationCore.Entities.Customers.RefOrderItemStatusCode", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("Microsoft.eShopWeb.ApplicationCore.Entities.Customers.RefOrderStatusCode", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Microsoft.eShopWeb.ApplicationCore.Entities.Customers.RefPaymentMethod", b =>
                {
                    b.Navigation("CustomerPaymentMethods");
                });

            modelBuilder.Entity("Microsoft.eShopWeb.ApplicationCore.Entities.Customers.RefProductType", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Microsoft.eShopWeb.ApplicationCore.Entities.Customers.Shipment", b =>
                {
                    b.Navigation("ShipmentItems");
                });
#pragma warning restore 612, 618
        }
    }
}
